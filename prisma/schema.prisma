// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                 @unique
  emailVerified         DateTime?
  image                 String?
  accounts              Account[]
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  Folder                Folder[]
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

//////////////////////////////////////////////////////////////////////////////////////

enum Color {
  RED
  GREEN
  BLUE
  YELLOW
  PURPLE
  ORANGE
  PINK
  WHITE
}

model Task {
  id        String    @id @default(cuid())
  title     String
  createdAt DateTime  @default(now())
  color     Color     @default(WHITE)
  folderId  String
  folder    Folder?    @relation(fields: [folderId], references: [id], onDelete: Cascade)
  emojiId   String
  Subtask   Subtask[]
  isDeleted Boolean   @default(false)
}

model Folder {
  id          String   @id @default(cuid())
  userId      String
  name        String
  createdAt   DateTime @default(now())
  completedAt DateTime @default(now())
  tasks       Task[]
  emojiId     String
  isDeleted   Boolean  @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Priority {
  DEFAULT
  NORMAL
  AVERAGE
  HIGN
}

model Subtask {
  id        String   @id @default(cuid())
  title     String
  createdAt DateTime @default(now())
  completed Boolean  @default(false)
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  priority  Priority @default(DEFAULT)
  isDone    Boolean  @default(false)
}
